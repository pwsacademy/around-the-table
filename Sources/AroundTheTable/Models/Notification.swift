import BSON
import Foundation

/**
 A notification generated by the system to inform users.
 */
final class Notification {
    
    /// The timestamp of the notification.
    /// This also serves as a primary key and may be slightly adjusted when persisted, to avoid conflicts.
    var timestamp: Date
    
    /// The recipient of the notification.
    let recipient: User
    
    /// A localized message for the recipient.
    /// This should be generated from the templates in **strings-<locale>.json**.
    let message: String
    
    /// A link attached to the notification.
    /// This is a relative link of the form **activity/id**.
    let link: String
    
    /// Whether the notification has been read by the recipient.
    var isRead: Bool
    
    /**
     Initializes a `Notification`.
     
     `timestamp` is set to the current date and time by default.
     `isRead` is set to `false` by default.
     */
    init(timestamp: Date = Date(), recipient: User, message: String, link: String, isRead: Bool = false) {
        self.timestamp = timestamp
        self.recipient = recipient
        self.message = message
        self.link = link
        self.isRead = isRead
    }
}

/**
 Adds `BSON.Primitive` conformance to `Notification`.
 */
extension Notification: Primitive {
    
    /// A `Notification` is stored as a BSON `Document`.
    var typeIdentifier: Byte {
        return Document().typeIdentifier
    }
    
    /// This `Notification` as a BSON `Document`.
    /// `recipient` is normalized and stored as a reference.
    var document: Document {
        return [
            "_id": timestamp,
            "recipient": recipient.id, // Normalized.
            "message": message,
            "link": link,
            "isRead": isRead,
        ]
    }
    
    /**
     Returns this `Notification` as a BSON `Document` in binary form.
     */
    func makeBinary() -> Bytes {
        return document.makeBinary()
    }
    
    /**
     Decodes a `Notification` from a BSON primitive.
     
     `recipient` must be denormalized before decoding.
     
     - Returns: `nil` when the primitive is not a `Document`.
     - Throws: a `BSONError` when the document does not contain all required properties.
     */
    convenience init?(_ bson: Primitive?) throws {
        guard let bson = bson as? Document else {
            return nil
        }
        guard let timestamp = Date(bson["_id"]) else {
            throw log(BSONError.missingField(name: "_id"))
        }
        guard let recipient = try User(bson["recipient"]) else {
            throw log(BSONError.missingField(name: "recipient"))
        }
        guard let message = String(bson["message"]) else {
            throw log(BSONError.missingField(name: "message"))
        }
        guard let link = String(bson["link"]) else {
            throw log(BSONError.missingField(name: "link"))
        }
        guard let isRead = Bool(bson["isRead"]) else {
            throw log(BSONError.missingField(name: "isRead"))
        }
        self.init(timestamp: timestamp,
                  recipient: recipient,
                  message: message,
                  link: link,
                  isRead: isRead)
    }
}
